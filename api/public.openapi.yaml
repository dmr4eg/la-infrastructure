openapi: 3.0.3
info:
  title: Little PM API
  version: 1.0.0
  description: |
    Comprehensive project management API with task tracking, reporting,
    and video resources. Provides secure access control and project organization.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://app.little.pm
    description: Production API

tags:
  - name: Course Service
    description: Project lifecycle management
  - name: Content Service
    description: Task management within projects
  - name: Finances Service
    description: Project budget management and financial tracking

paths:
  /project:
    post:
      tags: [Course Service]
      summary: Create project from blueprint
      description: Create project from blueprint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                blueprintUUID:
                  $ref: '#/components/schemas/uuid'
                name:
                  type: string
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/blueprintType"

      responses:
        '202':
          description: Project was created from a blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags: [Course Service]
      summary: List accessible projects
      description: Retrieve paginated list of projects with user access
      operationId: listProjects
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/projectStatusFilter"
      responses:
        '200':
          description: Successful project list retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /project/blueprints:
    get:
      tags: [Course Service]
      summary: List available blueprints
      description: Retrieve paginated list of blueprints for projects with user access
      operationId: listBlueprintsProject
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        '200':
          description: Successful project list retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectBlueprint'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /project/{projectUUID}:
    parameters:
      - $ref: "#/components/parameters/projectUUID"
    get:
      tags: [Course Service]
      summary: Get project details
      description: Retrieve detailed information about a specific project
      operationId: getProject
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Project details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Course Service]
      summary: Update project
      description: Update project metadata and details
      operationId: updateProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /finances/{projectUUID}:
    parameters:
      - $ref: "#/components/parameters/projectUUID"
    get:
      tags: [Finances Service]
      summary: Get project budget
      description: Retrieve financial budget details for a specific project
      operationId: getProjectBudget
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Budget details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Finances Service]
      summary: Update project budget (Partial)
      description: Update partial budget information for a project
      operationId: partialUpdateProjectBudget
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetUpdate'
      responses:
        '200':
          description: Budget updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Finances Service]
      summary: Update project budget (Full)
      description: Replace entire budget information for a project
      operationId: updateProjectBudget
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
      responses:
        '200':
          description: Budget replaced successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /project/{projectUUID}/unit:
    parameters:
      - $ref: "#/components/parameters/projectUUID"
    get:
      tags: [Content Service]
      summary: List project tasks
      description: Retrieve all tasks associated with a project
      operationId: listProjectTasks
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/taskStatusFilter"
      responses:
        '200':
          description: Successful task list retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /task/{taskUUID}:
    parameters:
      - $ref: "#/components/parameters/taskUUID"
    get:
      tags: [Content Service]
      summary: Get task details
      description: Retrieve detailed information about a specific task
      operationId: getTask
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Task details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Content Service]
      summary: Update task
      description: Modify existing task details
      operationId: updateTask
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /media/videos/{videoUUID}:
    parameters:
      - $ref: "#/components/parameters/videoUUID"
    get:
      tags: [Content Service]
      summary: Get video metadata
      description: Retrieve metadata about a video resource
      operationId: getVideoMetadata
      responses:
        '200':
          description: Video metadata retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Valid JWT token required for authenticated endpoints

  parameters:
    limit:
      name: limit
      in: query
      description: Maximum number of items to return
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    offset:
      name: offset
      in: query
      description: Pagination offset
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    projectUUID:
      name: projectUUID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
      description: Unique project identifier
    taskUUID:
      name: taskUUID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
      description: Unique task identifier
    blueprintUUID:
      name: blueprintUUID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
      description: Unique task identifier
    reportUUID:
      name: reportUUID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
      description: Unique report identifier
    videoUUID:
      name: videoUUID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
      description: Unique video identifier
    roleFilter:
      name: role
      in: query
      description: Filter by user role
      schema:
        type: string
        enum: [owner, member]
    taskStatusFilter:
      name: status
      in: query
      description: Filter tasks by status
      schema:
        type: string
        enum: [pending, in_progress, completed]
    blueprintType:
      name: status
      in: query
      description: Blueprints by its type
      schema:
        type: string
        enum: [toy]
    projectStatusFilter:
      name: status
      in: query
      description: Filter tasks by status
      schema:
        type: string
        enum: [in_progress, completed]


  schemas:
    uuid:
      type: string
      format: uuid
      example: "550e8400-e29b-41d4-a716-446655440000"

    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: "Resource not found"
        details:
          type: array
          items:
            type: string
          example: ["Invalid UUID format", "Missing required field"]

    Project:
      type: object
      required: [projectUUID, name, ownerUUID]
      properties:
        projectUUID:
          $ref: '#/components/schemas/uuid'
        name:
          type: string
          example: "Q4 Marketing Campaign"
        description:
          type: string
          example: "Year-end marketing push"
        ownerUUID:
          $ref: '#/components/schemas/uuid'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProjectBlueprint:
      type: object
      required: [blueprintUUID, projectUUID, title]
      properties:
        blueprintUUID:
          $ref: '#/components/schemas/uuid'
        title:
          type: string
          example: "Marketing Blueprint"
        description:
          type: string
          example: "Q4 marketing strategy"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProjectUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Updated Project Name"
        description:
          type: string
          example: "Revised project scope"

    Task:
      type: object
      required: [taskUUID, projectUUID, title, status, blueprintUUID]
      properties:
        taskUUID:
          $ref: '#/components/schemas/uuid'
        projectUUID:
          $ref: '#/components/schemas/uuid'
        title:
          type: string
          example: "Competitor Analysis"
        blueprintUUID:
          $ref: '#/components/schemas/uuid'
        description:
          type: string
          example: "Research main competitors' features"
        day:
          type: string
          enum: [ MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY ]
        status:
          type: string
          enum: [pending, in_progress, completed]
        dueDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TaskUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, in_progress, completed]
        dueDate:
          type: string
          format: date-time

    Budget:
      type: object
      required: [projectUUID, totalFunds, allocated]
      properties:
        projectUUID:
          $ref: '#/components/schemas/uuid'
        totalFunds:
          type: number
          format: float
          minimum: 0
          description: Total available funds for the project
          example: 50000.00
        allocated:
          type: number
          format: float
          minimum: 0
          description: Currently allocated funds
          example: 12500.50
        currency:
          type: string
          default: "USD"
          example: "EUR"
        lastUpdated:
          type: string
          format: date-time
          description: Timestamp of last modification

    BudgetUpdate:
      type: object
      properties:
        totalFunds:
          type: number
          format: float
          minimum: 0
        allocated:
          type: number
          format: float
          minimum: 0
        currency:
          type: string
      example:
        totalFunds: 75000.00
        allocated: 25000.00

    ReportStatus:
      type: object
      properties:
        reportUUID:
          $ref: '#/components/schemas/uuid'
        status:
          type: string
          enum: [queued, processing, completed, failed]
        downloadUrl:
          type: string
          format: uri
        requestedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    Video:
      type: object
      properties:
        videoUUID:
          $ref: '#/components/schemas/uuid'
        title:
          type: string
          example: "Product Demo"
        description:
          type: string
          example: "Q3 feature showcase"
        duration:
          type: number
          format: float
          example: 123.45
        resolution:
          type: string
          example: "1920x1080"
        createdAt:
          type: string
          format: date-time

    PitchDeck:
      type: object
      description: Unified schema for business pitch deck
      required:
        - plannedToys
        - expenseAmount
        - calculatedAmount
        - returnPercentage
        - founderName
        - founderDate
      properties:
        plannedToysAmount:
          type: integer
          minimum: 0
          example: 0
          description: Number of planned toys to sell (explicitly set to 0 for this pitch)
        expenseAmount:
          type: number
          format: float
          example: 5000.00
          description: Base expense amount for operations
        calculatedAmount:
          type: number
          format: float
          example: 1200.50
          description: Additional calculated expenses
        returnPercentage:
          type: number
          format: float
          minimum: 0
          maximum: 100
          example: 15.5
          description: Percentage return promised to investor
        returnAmount:
          type: number
          format: float
          example: 7750.00
          description: Total monetary value to return to investor
        founderName:
          type: string
          example: "John Doe"
          description: Full name of the business founder
        founderDate:
          type: string
          format: date
          example: "2023-09-20"
          description: Date of pitch submission/signature

    ToyAdvertisement:
      type: object
      description: Unified schema for sales advertisement
      required:
        - productName
        - price
        - eventLocation
        - eventDate
        - contactNumber
      properties:
        productName:
          type: string
          example: "Cat Toy"
          description: Name of the advertised product
        price:
          type: string
          example: "10 CZK"
          description: Price with currency symbol
          pattern: "^[0-9]+\\s[A-Z]{3}$"
        eventLocation:
          type: string
          example: "Tabletop market, Prague"
          description: Physical location for purchase
        eventDate:
          type: string
          format: date
          example: "2025-02-21"
          description:
            "Event date in ISO 8601 format (original: 21/02/2025)"
        contactNumber:
          type: string
          example: "+1234567890"
          description: International phone number
          pattern: "^\\+[0-9]{6,15}$"

    SalesReportPL:
      type: object
      description: Profit & Loss statement for sales operations
      required:
        - amountGivenByInvestor
        - amountToReturnToInvestor
        - totalSpent
        - toysPrepared
        - toysSold
        - toysLeft
        - amountForHelpers
        - totalRevenue
      properties:
        amountGivenByInvestor:
          type: number
          format: float
          example: 50000.00
          description: Initial investment amount (CZK, prefilled from DB)
          readOnly: true
        amountToReturnToInvestor:
          type: number
          format: float
          example: 62500.00
          description: Agreed return amount (CZK, prefilled from DB)
          readOnly: true
        totalSpent:
          type: number
          format: float
          example: 42000.00
          description: Total expenses (CZK, prefilled from DB)
          readOnly: true
        toysPrepared:
          type: integer
          example: 1000
          description: Initial stock quantity (prefilled from DB)
          readOnly: true
        toysSold:
          type: integer
          example: 850
          description: Units sold (prefilled from previous page)
          readOnly: true
        toysLeft:
          type: integer
          example: 150
          description:
            "Remaining inventory (calculated: prepared - sold)"
          readOnly: true
        amountForHelpers:
          type: number
          format: float
          example: 5000.00
          description: Proposed helper compensation (CZK, user input)
          minimum: 0
        totalRevenue:
          type: number
          format: float
          example: 85000.00
          description: Calculated gross income (CZK, toysSold * price)
          readOnly: true

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: "Validation error"
            details: ["Invalid date format", "Missing required field: title"]

    UnauthorizedError:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: "Authentication required"

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: "Insufficient permissions"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: "Project not found"

    InternalServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 500
            message: "Internal server error"