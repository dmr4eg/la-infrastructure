openapi: 3.0.3
info:
  title: Project & Day API
  version: 1.0.0
  description: An OpenAPI specification for project management, day templates, tasks, forms, media, and related user progress tracking.
servers:
  - url: https://api.example.com

########################################################
# SECURITY SCHEMES
########################################################
components:
  headers:
    Set-JWT:
      schema:
        type: string
        description: JWT token
        example: "jwt=tokenValue; Path=/; HttpOnly; Secure"
    Clear-JWT:
      schema:
        type: string
        description: JWT token clear
        example: "jwt=; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Path=/;"
    HomeRedirect:
      schema:
        type: string
        description: Home redirect
        example: /
    LoginRedirect:
      schema:
        type: string
        description: Login redirect
        example: /auth/login

  securitySchemes:
    admin_jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
    user_jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedLoginError:
      description: Unauthorized login
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    AuthorizationSuccess:
      description: OK
      headers:
        Set-Cookie:
          $ref: "#/components/headers/Set-JWT"
        Location:
          $ref: "#/components/headers/HomeRedirect"
    UnauthorizationSuccess:
      description: OK
      headers:
        Set-Cookie:
          $ref: "#/components/headers/Clear-JWT"
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotAcceptable:
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"


  ######################################################
  # SCHEMAS
  ######################################################
  schemas:

    Error:
      type: object
      description: Error object
      example: { "message": "Error message" }
      properties:
        message:
          description: Error message
          example: "Error message"
          type: string

    ######################################################
    # PROJECT
    ######################################################
    ProjectBlueprint:
      type: object
      properties:
        project_blueprint_uuid:
          type: string
          format: uuid
        poster_url:
          type: string
          description: URL for the project poster image
        welcome_video_url:
          type: string
          description: URL for the project introduction video
        title:
          type: string
        description:
          type: string
        difficulty:
          type: string
          enum: [easy, medium, hard]
        style:
          type: string
          enum: [dyi, ready_made]

    ProjectDaysMapper:
      type: object
      properties:
        project_blueprint:
          type: string
          format: uuid
          description: UUID referencing a ProjectBlueprint
        day:
          type: string
          format: uuid
          description: UUID referencing a DayBlueprint
        order:
          type: integer
          description: The order of the day in the project

    ProjectInstance:
      type: object
      properties:
        project_blueprint_uuid:
          type: string
          format: uuid
        user_uuid:
          type: string
          format: uuid
        status:
          type: string
          enum: [in_progress, completed]
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        feedback:
          type: string
        what_went_well:
          type: string

    ProjectFinance:
      type: object
      properties:
        project_blueprint_uuid:
          type: string
          format: uuid
        user_uuid:
          type: string
          format: uuid
        investor_gave:
          type: number
          format: float
        investor_return:
          type: number
          format: float
        spent_budget:
          type: number
          format: float
        toys_planned:
          type: number
          format: float
        toys_sold:
          type: number
          format: float
        toys_left:
          type: number
          format: float
        members_budged:
          type: number
          format: float
        profit:
          type: number
          format: float
        expense_amount:
          type: number
          format: float
        calculated_budget:
          type: number
          format: float
        items_cost:
          type: number
          format: float
        recommended_price:
          type: number
          format: float
        price_per_item:
          type: number
          format: float
        sold_price:
          type: number
          format: float

    ProjectMembers:
      type: object
      properties:
        project_blueprint_uuid:
          type: string
          format: uuid
        user_uuid:
          type: string
          format: uuid
        member_name:
          type: string

    ProjectDTO:
      type: object
      properties:
        blueprint:
          $ref: '#/components/schemas/ProjectBlueprint'
        instance:
          $ref: '#/components/schemas/ProjectInstance'

    ######################################################
    # DAY
    ######################################################
    DayBlueprint:
      type: object
      properties:
        day_blueprint_uuid:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        text:
          type: string

    DayComponentsMapper:
      type: object
      properties:
        day_blueprint_uuid:
          type: string
          format: uuid
        day_component_uuid:
          type: string
          format: uuid
        type:
          type: string
          enum: [task_blueprint, form_blueprint, media]

    DayInstance:
      type: object
      properties:
        day_blueprint_uuid:
          type: string
          format: uuid
        user_uuid:
          type: string
          format: uuid
        status:
          type: string
          enum: [in_progress, completed, not_started]

    DayDTO:
      type: object
      properties:
        blueprint:
          $ref: '#/components/schemas/DayBlueprint'
        instance:
          $ref: '#/components/schemas/DayInstance'

    ######################################################
    # TASK
    ######################################################
    TaskBlueprint:
      type: object
      properties:
        task_blueprint_uuid:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string

    TaskInstance:
      type: object
      properties:
        task_blueprint_uuid:
          type: string
          format: uuid
        user_uuid:
          type: string
          format: uuid
        status:
          type: boolean
          description: True if completed, false otherwise

    TaskDTO:
      type: object
      properties:
        blueprint:
          $ref: '#/components/schemas/TaskBlueprint'
        progress:
          $ref: '#/components/schemas/TaskInstance'

    ######################################################
    # FORM
    ######################################################
    FormBlueprint:
      type: object
      properties:
        form_blueprint_uuid:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        callback_url:
          type: string

    FormField:
      type: object
      properties:
        form_field_uuid:
          type: string
          format: uuid
        input_type:
          type: string
          enum: [text, number, file]
        required:
          type: boolean
        title:
          type: string
        description:
          type: string

    FormFieldMapper:
      type: object
      properties:
        form_blueprint_uuid:
          type: string
          format: uuid
        form_field:
          type: string
          format: uuid
        order:
          type: integer

    FormInstance:
      type: object
      properties:
        form_blueprint_uuid:
          type: string
          format: uuid
        user_uuid:
          type: string
          format: uuid
        status:
          type: boolean
          description: True if form is completed, false otherwise

    FormDTO:
      type: object
      properties:
        blueprint:
          $ref: '#/components/schemas/FormBlueprint'
        instance:
          $ref: '#/components/schemas/FormInstance'

    ######################################################
    # MEDIA
    ######################################################
    Media:
      type: object
      properties:
        mediaUUID:
          type: string
          format: uuid
        type:
          type: string
          enum: [video, image]
        title:
          type: string
        description:
          type: string

paths:

  ######################################################
  # PROJECT ENDPOINTS
  ######################################################
  /projects:
    get:
      summary: List project blueprints
      description: List project blueprints (paginated)
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of project blueprints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectBlueprint'
    post:
      summary: Create new project blueprint
      description: Create new project blueprint (admin only)
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectBlueprint'
      responses:
        '200':
          description: The created project blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectBlueprint'

  /projects/{project_blueprint_uuid}:
    parameters:
      - name: project_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get project blueprint details
      description: Returns a specific project blueprint
      responses:
        '200':
          description: Project blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectBlueprint'
    put:
      summary: Update an existing project blueprint
      description: Update project blueprint (admin only)
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectBlueprint'
      responses:
        '200':
          description: Updated project blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectBlueprint'
    delete:
      summary: Delete a project blueprint
      description: Delete project blueprint (admin only)
      security:
        - admin_jwt: []
      responses:
        '204':
          description: No Content

  ######################################################
  # PROJECT DAYS MAPPING
  ######################################################
  /projects/{project_blueprint_uuid}/days:
    parameters:
      - name: project_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get days linked to a project blueprint
      description: Get linked days (paginated)
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of ProjectDaysMapper
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDaysMapper'
    post:
      summary: Link a day to a project blueprint
      description: Link day to project (admin only)
      security:
        - admin_jwt: []
      parameters:
        - name: day_blueprint_uuid
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: order
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Linked day
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDaysMapper'
    delete:
      summary: Unlink a day from a project blueprint
      description: Unlink day from project (admin only)
      security:
        - admin_jwt: []
      parameters:
        - name: day_blueprint_uuid
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

  ######################################################
  # DAY BLUEPRINT ENDPOINTS
  ######################################################
  /days:
    get:
      summary: List day templates
      description: List day templates (paginated)
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of day blueprints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DayBlueprint'
    post:
      summary: Create day template
      description: Create day template (admin only)
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DayBlueprint'
      responses:
        '200':
          description: Created day blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DayBlueprint'

  /days/{day_blueprint_uuid}:
    parameters:
      - name: day_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get day template details
      responses:
        '200':
          description: Day blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DayBlueprint'
    put:
      summary: Update day template
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DayBlueprint'
      responses:
        '200':
          description: Updated day blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DayBlueprint'
    delete:
      summary: Delete day template
      security:
        - admin_jwt: []
      responses:
        '204':
          description: No Content

  ######################################################
  # DAY COMPONENTS MAPPING
  ######################################################
  /days/{day_blueprint_uuid}/components:
    parameters:
      - name: day_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: List day components
      description: List day components (paginated)
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of DayComponentsMapper
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DayComponentsMapper'
    post:
      summary: Add component to day
      description: Add a component (task_blueprint, form_blueprint, or media) to a day (admin only)
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                component_uuid:
                  type: string
                  format: uuid
                type:
                  type: string
                  enum: [task_blueprint, form_blueprint, media]
      responses:
        '200':
          description: Added component
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DayComponentsMapper'
    delete:
      summary: Remove component from day
      description: Remove a component from day (admin only)
      security:
        - admin_jwt: []
      parameters:
        - name: component_uuid
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

  ######################################################
  # MEDIA
  ######################################################
  /media:
    post:
      summary: Upload new media
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Media'
      responses:
        '200':
          description: The uploaded media metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'

  /media/{media_uuid}:
    parameters:
      - name: media_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get media metadata
      responses:
        '200':
          description: Media metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
    put:
      summary: Update media metadata
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Media'
      responses:
        '200':
          description: Updated media metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
    delete:
      summary: Delete media
      security:
        - admin_jwt: []
      responses:
        '204':
          description: No Content

  ######################################################
  # TASKS
  ######################################################
  /tasks:
    post:
      summary: Create task template
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskBlueprint'
      responses:
        '200':
          description: Created task blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskBlueprint'
    get:
      summary: List task templates
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of task templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskBlueprint'

  /tasks/{task_blueprint_uuid}:
    parameters:
      - name: task_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get task template
      responses:
        '200':
          description: Task blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskBlueprint'
    put:
      summary: Update task template
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskBlueprint'
      responses:
        '200':
          description: Updated task blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskBlueprint'
    delete:
      summary: Delete task template
      security:
        - admin_jwt: []
      responses:
        '204':
          description: No Content

  ######################################################
  # FORMS
  ######################################################
  /forms:
    post:
      summary: Create form template
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormBlueprint'
      responses:
        '200':
          description: Created form blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormBlueprint'
    get:
      summary: List form templates
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of form templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormBlueprint'

  /forms/{form_blueprint_uuid}:
    parameters:
      - name: form_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get form template
      responses:
        '200':
          description: Form blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormBlueprint'
    put:
      summary: Update form template
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormBlueprint'
      responses:
        '200':
          description: Updated form blueprint
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormBlueprint'
    delete:
      summary: Delete form template
      security:
        - admin_jwt: []
      responses:
        '204':
          description: No Content

  ######################################################
  # FORM FIELDS
  ######################################################
  /forms/{form_blueprint_uuid}/fields:
    parameters:
      - name: form_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Add field to form
      security:
        - admin_jwt: []
      parameters:
        - name: form_field_uuid
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: order
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Updated list of form field mappings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormFieldMapper'
    get:
      summary: List form fields
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of form field mappings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormFieldMapper'

  /forms/{form_blueprint_uuid}/fields/{field_uuid}:
    parameters:
      - name: form_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: field_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get field details
      responses:
        '200':
          description: Form field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormField'
    put:
      summary: Update field
      security:
        - admin_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                input_type:
                  type: string
                  enum: [text, number, file]
                required:
                  type: boolean
                title:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Updated form field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormField'
    delete:
      summary: Remove field from form
      security:
        - admin_jwt: []
      responses:
        '204':
          description: No Content

  ######################################################
  # PROJECT INSTANCE (USER)
  ######################################################
  /user/{user_uuid}/project:
    parameters:
      - name: user_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: List user's projects
      security:
        - user_jwt: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of the user's project DTOs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDTO'
    post:
      summary: Create new project instance
      security:
        - user_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_blueprint_uuid:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Created ProjectDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDTO'

  /user/{user_uuid}/project/{project_blueprint_uuid}:
    parameters:
      - name: user_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: project_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a user-specific project instance
      security:
        - user_jwt: []
      responses:
        '200':
          description: A single ProjectDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDTO'
    put:
      summary: Update project instance
      security:
        - user_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInstance'
      responses:
        '200':
          description: Updated ProjectDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDTO'

  ######################################################
  # DAY INSTANCE (USER)
  ######################################################
  /user/{user_uuid}/day/:
    parameters:
      - name: user_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: List user's day progress
      security:
        - user_jwt: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of DayDTO
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DayDTO'

  /user/{user_uuid}/day/{day_blueprint_uuid}:
    parameters:
      - name: user_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: day_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a user's day status
      security:
        - user_jwt: []
      responses:
        '200':
          description: DayDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DayDTO'
    put:
      summary: Update a user's day status
      security:
        - user_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DayInstance'
      responses:
        '200':
          description: Updated DayDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DayDTO'

  ######################################################
  # TASK INSTANCE (USER)
  ######################################################
  /user/{user_uuid}/task/:
    parameters:
      - name: user_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: List user's task progress
      security:
        - user_jwt: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of TaskDTO
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskDTO'

  /user/{user_uuid}/task/{task_blueprint_uuid}:
    parameters:
      - name: user_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: task_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get user's task status
      security:
        - user_jwt: []
      responses:
        '200':
          description: TaskDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'
    put:
      summary: Update user's task status
      security:
        - user_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstance'
      responses:
        '200':
          description: Updated TaskDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDTO'

  ######################################################
  # FORM INSTANCE (USER)
  ######################################################
  /user/{user_uuid}/form/:
    parameters:
      - name: user_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: List user's form submissions
      security:
        - user_jwt: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of FormDTO
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormDTO'

  /user/{user_uuid}/form/{form_blueprint_uuid}:
    parameters:
      - name: user_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: form_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a user's form submission
      security:
        - user_jwt: []
      responses:
        '200':
          description: FormDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDTO'
    put:
      summary: Update a user's form submission
      security:
        - user_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormInstance'
      responses:
        '200':
          description: Updated FormDTO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDTO'

  ######################################################
  # PROJECT MEMBERS (USER)
  ######################################################
  /user/{user_uuid}/project/{project_blueprint_uuid}/members:
    parameters:
      - name: user_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: project_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: List project members
      security:
        - user_jwt: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A list of ProjectMembers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMembers'
    post:
      summary: Add a member
      security:
        - user_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectMembers'
      responses:
        '200':
          description: Created project member record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembers'

  ######################################################
  # FINANCES (USER)
  ######################################################
  /user/{user_uuid}/project/{project_blueprint_uuid}/finances:
    parameters:
      - name: user_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: project_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Create financial data
      security:
        - user_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_blueprint_uuid:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Created project finance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFinance'
    put:
      summary: Update financial data
      security:
        - user_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectFinance'
      responses:
        '200':
          description: Updated project finance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFinance'
    get:
      summary: Get financial data
      security:
        - user_jwt: []
      responses:
        '200':
          description: Project finance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFinance'

  /user/{user_uuid}/project/{project_blueprint_uuid}/calculate:
    parameters:
      - name: user_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: project_blueprint_uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      summary: Calculate financial data
      security:
        - user_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectFinance'
      responses:
        '200':
          description: Calculated project finance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFinance'
