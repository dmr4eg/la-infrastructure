openapi: 3.0.3
info:
  description: |
    An example OpenAPI specification for the Little PM application, referencing path parameters from components.
  title: Little PM API
  version: 1.0.0
servers:
- description: Production server
  url: https://app.little.pm
tags:
- name: User Service
- name: Project Configuration Service
- name: Tasks/Blueprint Service
- name: Finances Service
- name: Report Service
- name: Video Glossary
paths:
  /auth:
    post:
      description: Authenticate a user and return a token or session details.
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              $ref: '#/components/headers/Set-JWT'
            Location:
              $ref: '#/components/headers/HomeRedirect'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized login
      summary: User authentication
      tags:
      - User Service
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: User Service
  /users/{userUUID}:
    delete:
      description: Remove a user from the system by UUID.
      operationId: deleteUser
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: userUUID
        required: true
        schema:
          $ref: '#/components/schemas/userUUID'
        style: simple
      responses:
        "204":
          description: User deleted successfully
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User not found
      summary: Delete user
      tags:
      - User Service
      x-accepts:
      - application/json
      x-tags:
      - tag: User Service
    get:
      description: Retrieve user details.
      operationId: getUser
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: userUUID
        required: true
        schema:
          $ref: '#/components/schemas/userUUID'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User not found
      summary: Get user by UUID
      tags:
      - User Service
      x-accepts:
      - application/json
      x-tags:
      - tag: User Service
  /users/{userUUID}/consent:
    patch:
      description: Update a userâ€™s parental consent details.
      operationId: updateUserConsent
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: userUUID
        required: true
        schema:
          $ref: '#/components/schemas/userUUID'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParentalConsent'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Consent updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User not found
      summary: Update user consent
      tags:
      - User Service
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: User Service
  /projects/{userUUID}:
    get:
      description: List all projects belonging to a specific user.
      operationId: getUserProjects
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: userUUID
        required: true
        schema:
          $ref: '#/components/schemas/userUUID'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProjectIdea'
                type: array
          description: A list of projects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User not found
      summary: Get projects for user
      tags:
      - Project Configuration Service
      x-accepts:
      - application/json
      x-tags:
      - tag: Project Configuration Service
    post:
      description: Create a new project idea or configuration for a specific user.
      operationId: createUserProject
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: userUUID
        required: true
        schema:
          $ref: '#/components/schemas/userUUID'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectIdea'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIdea'
          description: Project created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User not found
      summary: Create new project for user
      tags:
      - Project Configuration Service
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Project Configuration Service
  /projects/{userUUID}/{projectUUID}:
    get:
      description: Retrieve details of a specific project for a user.
      operationId: getProject
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: userUUID
        required: true
        schema:
          $ref: '#/components/schemas/userUUID'
        style: simple
      - description: ID of the project
        explode: false
        in: path
        name: projectUUID
        required: true
        schema:
          $ref: '#/components/schemas/projectUUID'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIdea'
          description: Project found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Project or user not found
      summary: Get project by UUID
      tags:
      - Project Configuration Service
      x-accepts:
      - application/json
      x-tags:
      - tag: Project Configuration Service
    put:
      description: Update the details of an existing project for a user.
      operationId: updateProject
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: userUUID
        required: true
        schema:
          $ref: '#/components/schemas/userUUID'
        style: simple
      - description: ID of the project
        explode: false
        in: path
        name: projectUUID
        required: true
        schema:
          $ref: '#/components/schemas/projectUUID'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectIdea'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIdea'
          description: Project updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Project or user not found
      summary: Update an existing project
      tags:
      - Project Configuration Service
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Project Configuration Service
  /tasks/{projectUUID}:
    get:
      description: Retrieve all tasks for the specified project.
      operationId: getProjectTasks
      parameters:
      - description: ID of the project
        explode: false
        in: path
        name: projectUUID
        required: true
        schema:
          $ref: '#/components/schemas/projectUUID'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Task'
                type: array
          description: A list of tasks
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Project not found
      summary: Get tasks for a project
      tags:
      - Tasks/Blueprint Service
      x-accepts:
      - application/json
      x-tags:
      - tag: Tasks/Blueprint Service
    post:
      description: Create a new task for the specified project.
      operationId: createTask
      parameters:
      - description: ID of the project
        explode: false
        in: path
        name: projectUUID
        required: true
        schema:
          $ref: '#/components/schemas/projectUUID'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Task created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Project not found
      summary: Create a new task
      tags:
      - Tasks/Blueprint Service
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Tasks/Blueprint Service
  /tasks/{projectUUID}/{taskUUID}:
    get:
      description: Retrieve a specific task by UUID within a project.
      operationId: getTask
      parameters:
      - description: ID of the project
        explode: false
        in: path
        name: projectUUID
        required: true
        schema:
          $ref: '#/components/schemas/projectUUID'
        style: simple
      - description: ID of the task
        explode: false
        in: path
        name: taskUUID
        required: true
        schema:
          $ref: '#/components/schemas/taskUUID'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Task found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Task or project not found
      summary: Get a task by UUID
      tags:
      - Tasks/Blueprint Service
      x-accepts:
      - application/json
      x-tags:
      - tag: Tasks/Blueprint Service
    patch:
      description: "Partially update a taskâ€™s status, completion date, etc."
      operationId: updateTask
      parameters:
      - description: ID of the project
        explode: false
        in: path
        name: projectUUID
        required: true
        schema:
          $ref: '#/components/schemas/projectUUID'
        style: simple
      - description: ID of the task
        explode: false
        in: path
        name: taskUUID
        required: true
        schema:
          $ref: '#/components/schemas/taskUUID'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateTask_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Task updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Task or project not found
      summary: "Update a task (e.g., completion)"
      tags:
      - Tasks/Blueprint Service
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Tasks/Blueprint Service
  /finances/{projectUUID}:
    get:
      description: Retrieve budget or finance info for a specific project.
      operationId: getFinances
      parameters:
      - description: ID of the project
        explode: false
        in: path
        name: projectUUID
        required: true
        schema:
          $ref: '#/components/schemas/projectUUID'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
          description: Financial details found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Project not found
      summary: Get finance details
      tags:
      - Finances Service
      x-accepts:
      - application/json
      x-tags:
      - tag: Finances Service
    post:
      description: "Update or create financial info (e.g., budget) for a project."
      operationId: updateFinances
      parameters:
      - description: ID of the project
        explode: false
        in: path
        name: projectUUID
        required: true
        schema:
          $ref: '#/components/schemas/projectUUID'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
          description: Finance details updated/created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Project not found
      summary: Update or create finance details
      tags:
      - Finances Service
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Finances Service
  /finances/calculate:
    post:
      description: "Given investment data, compute ROI or related metrics."
      operationId: calculateFinances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestmentData'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ROIResult'
          description: Calculation result
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
      summary: Calculate ROI or financial projections
      tags:
      - Finances Service
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Finances Service
  /reports/{userUUID}:
    get:
      description: Retrieve a list of generated reports for the specified user.
      operationId: getReports
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: userUUID
        required: true
        schema:
          $ref: '#/components/schemas/userUUID'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Report'
                type: array
          description: Reports found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User not found
      summary: List all reports for a user
      tags:
      - Report Service
      x-accepts:
      - application/json
      x-tags:
      - tag: Report Service
    post:
      description: "Create a new report (e.g., pitch deck, marketing, financial)."
      operationId: createReport
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: userUUID
        required: true
        schema:
          $ref: '#/components/schemas/userUUID'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
          description: Report generated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User not found
      summary: Generate a new report
      tags:
      - Report Service
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Report Service
  /reports/{userUUID}/{reportUUID}:
    get:
      description: Retrieve a specific report by UUID for a user.
      operationId: getReport
      parameters:
      - description: ID of the user
        explode: false
        in: path
        name: userUUID
        required: true
        schema:
          $ref: '#/components/schemas/userUUID'
        style: simple
      - explode: false
        in: path
        name: reportUUID
        required: true
        schema:
          example: 665c599d-5c8d-4d20-aaab-7ffaba150606
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
          description: Report found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Report or user not found
      summary: Get a specific report
      tags:
      - Report Service
      x-accepts:
      - application/json
      x-tags:
      - tag: Report Service
  /videos:
    get:
      description: Retrieve a list of available videos in the glossary.
      operationId: getAllVideos
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/getAllVideos_200_response_inner'
                type: array
          description: A list of videos
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
      summary: List all videos
      tags:
      - Video Glossary
      x-accepts:
      - application/json
      x-tags:
      - tag: Video Glossary
  /videos/{videoUUID}:
    get:
      description: Retrieve details of a specific video by UUID.
      operationId: getVideo
      parameters:
      - description: ID of the video
        explode: false
        in: path
        name: videoUUID
        required: true
        schema:
          $ref: '#/components/schemas/videoUUID'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getVideo_200_response'
          description: Video found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Video not found
      summary: Get a specific video
      tags:
      - Video Glossary
      x-accepts:
      - application/json
      x-tags:
      - tag: Video Glossary
components:
  headers:
    Set-JWT:
      explode: false
      schema:
        description: JWT token
        example: jwt=tokenValue; Path=/; HttpOnly; Secure
        type: string
      style: simple
    Clear-JWT:
      explode: false
      schema:
        description: JWT token clear
        example: "jwt=; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Path=/;"
        type: string
      style: simple
    HomeRedirect:
      explode: false
      schema:
        description: Home redirect
        example: /
        type: string
      style: simple
    LoginRedirect:
      explode: false
      schema:
        description: Login redirect
        example: /auth/login
        type: string
      style: simple
  parameters:
    userUUID:
      description: ID of the user
      explode: false
      in: path
      name: userUUID
      required: true
      schema:
        $ref: '#/components/schemas/userUUID'
      style: simple
    projectUUID:
      description: ID of the project
      explode: false
      in: path
      name: projectUUID
      required: true
      schema:
        $ref: '#/components/schemas/projectUUID'
      style: simple
    taskUUID:
      description: ID of the task
      explode: false
      in: path
      name: taskUUID
      required: true
      schema:
        $ref: '#/components/schemas/taskUUID'
      style: simple
    videoUUID:
      description: ID of the video
      explode: false
      in: path
      name: videoUUID
      required: true
      schema:
        $ref: '#/components/schemas/videoUUID'
      style: simple
  responses:
    UnauthorizedLoginError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized login
    UnauthorizedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized access
    AuthorizationSuccess:
      description: OK
      headers:
        Set-Cookie:
          $ref: '#/components/headers/Set-JWT'
        Location:
          $ref: '#/components/headers/HomeRedirect'
    UnauthorizationSuccess:
      description: OK
      headers:
        Set-Cookie:
          $ref: '#/components/headers/Clear-JWT'
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request
    NotAcceptable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Acceptable
  schemas:
    userUUID:
      description: ID of the user
      example: 665c599d-5c8d-4d20-aaab-7ffaba150606
      format: uuid
      type: string
    projectUUID:
      description: ID of the project
      example: 665c599d-5c8d-4d20-aaab-7ffaba150606
      format: uuid
      type: string
    taskUUID:
      description: ID of the task
      example: 665c599d-5c8d-4d20-aaab-7ffaba150606
      format: uuid
      type: string
    ideaUUID:
      description: ID of the project idea
      example: 665c599d-5c8d-4d20-aaab-7ffaba150606
      format: uuid
      type: string
    reportUUID:
      description: ID of the report
      example: 665c599d-5c8d-4d20-aaab-7ffaba150606
      format: uuid
      type: string
    videoUUID:
      description: ID of the video
      example: 665c599d-5c8d-4d20-aaab-7ffaba150606
      format: uuid
      type: string
    Error:
      description: Error object
      example:
        message: Error message
      properties:
        message:
          description: Error message
          example: Error message
          type: string
      type: object
    UserRegistration:
      example:
        password: password
        name: name
        email: email
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
      - email
      - password
      type: object
    User:
      example:
        password: password
        name: name
        userUUID: 665c599d-5c8d-4d20-aaab-7ffaba150606
        email: email
      properties:
        userUUID:
          description: ID of the user
          example: 665c599d-5c8d-4d20-aaab-7ffaba150606
          format: uuid
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
      type: object
    ParentalConsent:
      example:
        isSigned: true
        signedDate: 2000-01-23T04:56:07.000+00:00
      properties:
        isSigned:
          type: boolean
        signedDate:
          format: date-time
          type: string
      type: object
    Budget:
      example:
        totalFunds: 0.8008282
        allocated: 6.0274563
      properties:
        totalFunds:
          format: float
          type: number
        allocated:
          format: float
          type: number
      type: object
    BudgetUpdate:
      example:
        totalFunds: 0.8008281904610115
        allocated: 6.027456183070403
      properties:
        totalFunds:
          type: number
        allocated:
          type: number
      type: object
    InvestmentData:
      example:
        initialInvestment: 0.8008281904610115
        expenses: 6.027456183070403
      properties:
        initialInvestment:
          type: number
        expenses:
          type: number
      type: object
    ROIResult:
      example:
        roiPercentage: 0.8008281904610115
        profit: 6.027456183070403
      properties:
        roiPercentage:
          type: number
        profit:
          type: number
      type: object
    ProjectIdea:
      example:
        ideaUUID: 665c599d-5c8d-4d20-aaab-7ffaba150606
        teamSize: 6
        requiredInvestment: 0.8008281904610115
        ideaName: ideaName
        productType: productType
      properties:
        ideaUUID:
          description: ID of the project idea
          example: 665c599d-5c8d-4d20-aaab-7ffaba150606
          format: uuid
          type: string
        ideaName:
          type: string
        requiredInvestment:
          type: number
        productType:
          type: string
        teamSize:
          type: integer
      type: object
    Task:
      example:
        name: name
        taskUUID: 665c599d-5c8d-4d20-aaab-7ffaba150606
        day: 0
        status: pending
      properties:
        taskUUID:
          description: ID of the task
          example: 665c599d-5c8d-4d20-aaab-7ffaba150606
          format: uuid
          type: string
        name:
          type: string
        day:
          type: integer
        status:
          enum:
          - pending
          - completed
          type: string
      type: object
    TaskCompletion:
      properties:
        taskUUID:
          description: ID of the task
          example: 665c599d-5c8d-4d20-aaab-7ffaba150606
          format: uuid
          type: string
        completedDate:
          format: date-time
          type: string
      type: object
    ReportRequest:
      example:
        reportType: pitchDeck
        inputs: "{}"
      properties:
        reportType:
          enum:
          - pitchDeck
          - marketing
          - financial
          type: string
        inputs:
          description: Key-value inputs for the template
          type: object
      type: object
    Report:
      example:
        reportType: reportType
        reportUUID: 665c599d-5c8d-4d20-aaab-7ffaba150606
        url: url
      properties:
        reportUUID:
          description: ID of the report
          example: 665c599d-5c8d-4d20-aaab-7ffaba150606
          format: uuid
          type: string
        reportType:
          type: string
        url:
          description: URL to download the generated file
          type: string
      type: object
    updateTask_request:
      oneOf:
      - $ref: '#/components/schemas/Task'
      - $ref: '#/components/schemas/TaskCompletion'
      x-one-of-name: UpdateTaskRequest
    getAllVideos_200_response_inner:
      example:
        videoUUID: 665c599d-5c8d-4d20-aaab-7ffaba150606
        title: title
      properties:
        videoUUID:
          description: ID of the video
          example: 665c599d-5c8d-4d20-aaab-7ffaba150606
          format: uuid
          type: string
        title:
          type: string
      type: object
    getVideo_200_response:
      example:
        videoUUID: 665c599d-5c8d-4d20-aaab-7ffaba150606
        description: description
        title: title
        url: url
      properties:
        videoUUID:
          description: ID of the video
          example: 665c599d-5c8d-4d20-aaab-7ffaba150606
          format: uuid
          type: string
        title:
          type: string
        description:
          type: string
        url:
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      description: JWT token
      scheme: bearer
      type: http
