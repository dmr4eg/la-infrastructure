/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.GetAllVideos200ResponseInner;
import org.openapitools.model.GetVideo200Response;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-11T22:50:07.779870+01:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Video Glossary", description = "the Video Glossary API")
public interface VideosApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /videos : List all videos
     * Retrieve a list of available videos in the glossary.
     *
     * @return A list of videos (status code 200)
     *         or Unauthorized access (status code 401)
     */
    @Operation(
        operationId = "getAllVideos",
        summary = "List all videos",
        description = "Retrieve a list of available videos in the glossary.",
        tags = { "Video Glossary" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of videos", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetAllVideos200ResponseInner.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/videos",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GetAllVideos200ResponseInner>> getAllVideos(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"videoUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"title\" : \"title\" }, { \"videoUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /videos/{videoUUID} : Get a specific video
     * Retrieve details of a specific video by UUID.
     *
     * @param videoUUID ID of the video (required)
     * @return Video found (status code 200)
     *         or Unauthorized access (status code 401)
     *         or Video not found (status code 404)
     */
    @Operation(
        operationId = "getVideo",
        summary = "Get a specific video",
        description = "Retrieve details of a specific video by UUID.",
        tags = { "Video Glossary" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Video found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetVideo200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Video not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/videos/{videoUUID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetVideo200Response> getVideo(
        @Parameter(name = "videoUUID", description = "ID of the video", required = true, in = ParameterIn.PATH) @PathVariable("videoUUID") UUID videoUUID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"videoUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"description\" : \"description\", \"title\" : \"title\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
