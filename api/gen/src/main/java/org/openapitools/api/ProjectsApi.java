/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.ProjectIdea;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-11T22:50:07.779870+01:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Project Configuration Service", description = "the Project Configuration Service API")
public interface ProjectsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /projects/{userUUID} : Create new project for user
     * Create a new project idea or configuration for a specific user.
     *
     * @param userUUID ID of the user (required)
     * @param projectIdea  (required)
     * @return Project created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized access (status code 401)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "createUserProject",
        summary = "Create new project for user",
        description = "Create a new project idea or configuration for a specific user.",
        tags = { "Project Configuration Service" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Project created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectIdea.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{userUUID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectIdea> createUserProject(
        @Parameter(name = "userUUID", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userUUID") UUID userUUID,
        @Parameter(name = "ProjectIdea", description = "", required = true) @Valid @RequestBody ProjectIdea projectIdea
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ideaUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"teamSize\" : 6, \"requiredInvestment\" : 0.8008281904610115, \"ideaName\" : \"ideaName\", \"productType\" : \"productType\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{userUUID}/{projectUUID} : Get project by UUID
     * Retrieve details of a specific project for a user.
     *
     * @param userUUID ID of the user (required)
     * @param projectUUID ID of the project (required)
     * @return Project found (status code 200)
     *         or Unauthorized access (status code 401)
     *         or Project or user not found (status code 404)
     */
    @Operation(
        operationId = "getProject",
        summary = "Get project by UUID",
        description = "Retrieve details of a specific project for a user.",
        tags = { "Project Configuration Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Project found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectIdea.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Project or user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{userUUID}/{projectUUID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProjectIdea> getProject(
        @Parameter(name = "userUUID", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userUUID") UUID userUUID,
        @Parameter(name = "projectUUID", description = "ID of the project", required = true, in = ParameterIn.PATH) @PathVariable("projectUUID") UUID projectUUID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ideaUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"teamSize\" : 6, \"requiredInvestment\" : 0.8008281904610115, \"ideaName\" : \"ideaName\", \"productType\" : \"productType\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{userUUID} : Get projects for user
     * List all projects belonging to a specific user.
     *
     * @param userUUID ID of the user (required)
     * @return A list of projects (status code 200)
     *         or Unauthorized access (status code 401)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "getUserProjects",
        summary = "Get projects for user",
        description = "List all projects belonging to a specific user.",
        tags = { "Project Configuration Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of projects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProjectIdea.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{userUUID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProjectIdea>> getUserProjects(
        @Parameter(name = "userUUID", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userUUID") UUID userUUID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"ideaUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"teamSize\" : 6, \"requiredInvestment\" : 0.8008281904610115, \"ideaName\" : \"ideaName\", \"productType\" : \"productType\" }, { \"ideaUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"teamSize\" : 6, \"requiredInvestment\" : 0.8008281904610115, \"ideaName\" : \"ideaName\", \"productType\" : \"productType\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /projects/{userUUID}/{projectUUID} : Update an existing project
     * Update the details of an existing project for a user.
     *
     * @param userUUID ID of the user (required)
     * @param projectUUID ID of the project (required)
     * @param projectIdea  (required)
     * @return Project updated (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized access (status code 401)
     *         or Project or user not found (status code 404)
     */
    @Operation(
        operationId = "updateProject",
        summary = "Update an existing project",
        description = "Update the details of an existing project for a user.",
        tags = { "Project Configuration Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Project updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProjectIdea.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Project or user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/projects/{userUUID}/{projectUUID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProjectIdea> updateProject(
        @Parameter(name = "userUUID", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userUUID") UUID userUUID,
        @Parameter(name = "projectUUID", description = "ID of the project", required = true, in = ParameterIn.PATH) @PathVariable("projectUUID") UUID projectUUID,
        @Parameter(name = "ProjectIdea", description = "", required = true) @Valid @RequestBody ProjectIdea projectIdea
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ideaUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"teamSize\" : 6, \"requiredInvestment\" : 0.8008281904610115, \"ideaName\" : \"ideaName\", \"productType\" : \"productType\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
