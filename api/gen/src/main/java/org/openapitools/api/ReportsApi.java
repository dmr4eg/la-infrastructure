/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.Report;
import org.openapitools.model.ReportRequest;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-11T22:50:07.779870+01:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Report Service", description = "the Report Service API")
public interface ReportsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /reports/{userUUID} : Generate a new report
     * Create a new report (e.g., pitch deck, marketing, financial).
     *
     * @param userUUID ID of the user (required)
     * @param reportRequest  (required)
     * @return Report generated (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized access (status code 401)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "createReport",
        summary = "Generate a new report",
        description = "Create a new report (e.g., pitch deck, marketing, financial).",
        tags = { "Report Service" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Report generated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Report.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/reports/{userUUID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Report> createReport(
        @Parameter(name = "userUUID", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userUUID") UUID userUUID,
        @Parameter(name = "ReportRequest", description = "", required = true) @Valid @RequestBody ReportRequest reportRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reportType\" : \"reportType\", \"reportUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reports/{userUUID}/{reportUUID} : Get a specific report
     * Retrieve a specific report by UUID for a user.
     *
     * @param userUUID ID of the user (required)
     * @param reportUUID  (required)
     * @return Report found (status code 200)
     *         or Unauthorized access (status code 401)
     *         or Report or user not found (status code 404)
     */
    @Operation(
        operationId = "getReport",
        summary = "Get a specific report",
        description = "Retrieve a specific report by UUID for a user.",
        tags = { "Report Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Report found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Report.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Report or user not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reports/{userUUID}/{reportUUID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Report> getReport(
        @Parameter(name = "userUUID", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userUUID") UUID userUUID,
        @Parameter(name = "reportUUID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("reportUUID") UUID reportUUID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reportType\" : \"reportType\", \"reportUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reports/{userUUID} : List all reports for a user
     * Retrieve a list of generated reports for the specified user.
     *
     * @param userUUID ID of the user (required)
     * @return Reports found (status code 200)
     *         or Unauthorized access (status code 401)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "getReports",
        summary = "List all reports for a user",
        description = "Retrieve a list of generated reports for the specified user.",
        tags = { "Report Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Reports found", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Report.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reports/{userUUID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Report>> getReports(
        @Parameter(name = "userUUID", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("userUUID") UUID userUUID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"reportType\" : \"reportType\", \"reportUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"url\" : \"url\" }, { \"reportType\" : \"reportType\", \"reportUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
