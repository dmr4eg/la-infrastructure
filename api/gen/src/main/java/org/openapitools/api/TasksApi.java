/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.Task;
import java.util.UUID;
import org.openapitools.model.UpdateTaskRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-11T22:50:07.779870+01:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Tasks/Blueprint Service", description = "the Tasks/Blueprint Service API")
public interface TasksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /tasks/{projectUUID} : Create a new task
     * Create a new task for the specified project.
     *
     * @param projectUUID ID of the project (required)
     * @param task  (required)
     * @return Task created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized access (status code 401)
     *         or Project not found (status code 404)
     */
    @Operation(
        operationId = "createTask",
        summary = "Create a new task",
        description = "Create a new task for the specified project.",
        tags = { "Tasks/Blueprint Service" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Task created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Project not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tasks/{projectUUID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Task> createTask(
        @Parameter(name = "projectUUID", description = "ID of the project", required = true, in = ParameterIn.PATH) @PathVariable("projectUUID") UUID projectUUID,
        @Parameter(name = "Task", description = "", required = true) @Valid @RequestBody Task task
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"taskUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"day\" : 0, \"status\" : \"pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tasks/{projectUUID} : Get tasks for a project
     * Retrieve all tasks for the specified project.
     *
     * @param projectUUID ID of the project (required)
     * @return A list of tasks (status code 200)
     *         or Unauthorized access (status code 401)
     *         or Project not found (status code 404)
     */
    @Operation(
        operationId = "getProjectTasks",
        summary = "Get tasks for a project",
        description = "Retrieve all tasks for the specified project.",
        tags = { "Tasks/Blueprint Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of tasks", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Task.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Project not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks/{projectUUID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Task>> getProjectTasks(
        @Parameter(name = "projectUUID", description = "ID of the project", required = true, in = ParameterIn.PATH) @PathVariable("projectUUID") UUID projectUUID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"taskUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"day\" : 0, \"status\" : \"pending\" }, { \"name\" : \"name\", \"taskUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"day\" : 0, \"status\" : \"pending\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tasks/{projectUUID}/{taskUUID} : Get a task by UUID
     * Retrieve a specific task by UUID within a project.
     *
     * @param projectUUID ID of the project (required)
     * @param taskUUID ID of the task (required)
     * @return Task found (status code 200)
     *         or Unauthorized access (status code 401)
     *         or Task or project not found (status code 404)
     */
    @Operation(
        operationId = "getTask",
        summary = "Get a task by UUID",
        description = "Retrieve a specific task by UUID within a project.",
        tags = { "Tasks/Blueprint Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Task or project not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks/{projectUUID}/{taskUUID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Task> getTask(
        @Parameter(name = "projectUUID", description = "ID of the project", required = true, in = ParameterIn.PATH) @PathVariable("projectUUID") UUID projectUUID,
        @Parameter(name = "taskUUID", description = "ID of the task", required = true, in = ParameterIn.PATH) @PathVariable("taskUUID") UUID taskUUID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"taskUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"day\" : 0, \"status\" : \"pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /tasks/{projectUUID}/{taskUUID} : Update a task (e.g., completion)
     * Partially update a task’s status, completion date, etc.
     *
     * @param projectUUID ID of the project (required)
     * @param taskUUID ID of the task (required)
     * @param updateTaskRequest  (required)
     * @return Task updated (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized access (status code 401)
     *         or Task or project not found (status code 404)
     */
    @Operation(
        operationId = "updateTask",
        summary = "Update a task (e.g., completion)",
        description = "Partially update a task’s status, completion date, etc.",
        tags = { "Tasks/Blueprint Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Task or project not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/tasks/{projectUUID}/{taskUUID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Task> updateTask(
        @Parameter(name = "projectUUID", description = "ID of the project", required = true, in = ParameterIn.PATH) @PathVariable("projectUUID") UUID projectUUID,
        @Parameter(name = "taskUUID", description = "ID of the task", required = true, in = ParameterIn.PATH) @PathVariable("taskUUID") UUID taskUUID,
        @Parameter(name = "UpdateTaskRequest", description = "", required = true) @Valid @RequestBody UpdateTaskRequest updateTaskRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"taskUUID\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"day\" : 0, \"status\" : \"pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
