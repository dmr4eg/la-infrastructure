/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Budget;
import org.openapitools.model.BudgetUpdate;
import org.openapitools.model.Error;
import org.openapitools.model.InvestmentData;
import org.openapitools.model.ROIResult;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-11T22:50:07.779870+01:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Finances Service", description = "the Finances Service API")
public interface FinancesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /finances/calculate : Calculate ROI or financial projections
     * Given investment data, compute ROI or related metrics.
     *
     * @param investmentData  (required)
     * @return Calculation result (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized access (status code 401)
     */
    @Operation(
        operationId = "calculateFinances",
        summary = "Calculate ROI or financial projections",
        description = "Given investment data, compute ROI or related metrics.",
        tags = { "Finances Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Calculation result", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ROIResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/finances/calculate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ROIResult> calculateFinances(
        @Parameter(name = "InvestmentData", description = "", required = true) @Valid @RequestBody InvestmentData investmentData
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"roiPercentage\" : 0.8008281904610115, \"profit\" : 6.027456183070403 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /finances/{projectUUID} : Get finance details
     * Retrieve budget or finance info for a specific project.
     *
     * @param projectUUID ID of the project (required)
     * @return Financial details found (status code 200)
     *         or Unauthorized access (status code 401)
     *         or Project not found (status code 404)
     */
    @Operation(
        operationId = "getFinances",
        summary = "Get finance details",
        description = "Retrieve budget or finance info for a specific project.",
        tags = { "Finances Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Financial details found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Budget.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Project not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/finances/{projectUUID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Budget> getFinances(
        @Parameter(name = "projectUUID", description = "ID of the project", required = true, in = ParameterIn.PATH) @PathVariable("projectUUID") UUID projectUUID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalFunds\" : 0.8008282, \"allocated\" : 6.0274563 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /finances/{projectUUID} : Update or create finance details
     * Update or create financial info (e.g., budget) for a project.
     *
     * @param projectUUID ID of the project (required)
     * @param budgetUpdate  (required)
     * @return Finance details updated/created (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized access (status code 401)
     *         or Project not found (status code 404)
     */
    @Operation(
        operationId = "updateFinances",
        summary = "Update or create finance details",
        description = "Update or create financial info (e.g., budget) for a project.",
        tags = { "Finances Service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Finance details updated/created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Budget.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized access", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Project not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/finances/{projectUUID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Budget> updateFinances(
        @Parameter(name = "projectUUID", description = "ID of the project", required = true, in = ParameterIn.PATH) @PathVariable("projectUUID") UUID projectUUID,
        @Parameter(name = "BudgetUpdate", description = "", required = true) @Valid @RequestBody BudgetUpdate budgetUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalFunds\" : 0.8008282, \"allocated\" : 6.0274563 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Error message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
